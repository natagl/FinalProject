{"version":3,"sources":["services/index.js","components/home/Home.js","components/404/NotFound.js","components/auth/SignUp.js","components/auth/LogIn.js","components/profile/Profile.js","App.js","serviceWorker.js","index.js"],"names":["baseURL","console","log","service","axios","create","withCredentials","actions","isLoggedIn","a","get","signUp","user","post","logIn","logOut","Home","Component","NotFound","SignUp","state","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","props","setUser","data","message","onSubmit","this","type","onChange","LogIn","doFlashMessage","response","Profile","email","history","push","App","createdAt","updatedAt","_id","to","onClick","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yKACIA,E,+IAEJC,QAAQC,IAAI,WAIPF,EAAU,0CAGf,IAAMG,EAAUC,IAAMC,OAAO,CAAEC,iBAAiB,EAAMN,YAiBvCO,EAfC,CACdC,WAAW,WAAD,4BAAE,sBAAAC,EAAA,sEACGN,EAAQO,IAAI,iBADf,mFAAF,kDAAC,GAGXC,OAAO,WAAD,4BAAE,WAAMC,GAAN,SAAAH,EAAA,sEACON,EAAQU,KAAK,UAAWD,GAD/B,mFAAF,mDAAC,GAGPE,MAAM,WAAD,4BAAE,WAAMF,GAAN,SAAAH,EAAA,sEACQN,EAAQU,KAAK,SAAUD,GAD/B,mFAAF,mDAAC,GAGNG,OAAO,WAAD,4BAAE,sBAAAN,EAAA,sEACON,EAAQO,IAAI,WADnB,mFAAF,kDAAC,ICLMM,E,+ZARX,OACE,kC,GANaC,aCMJC,MARf,WACE,OACE,6BACE,2C,QC2BSC,E,2MA5BXC,MAAQ,G,EAGRC,aAAe,SAAAC,GAAC,OAAI,EAAKC,SAAL,eAAgBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,S,EAE7DC,a,uCAAe,WAAML,GAAN,eAAAb,EAAA,6DACXa,EAAEM,iBADS,kBAGUrB,EAAQI,OAAO,EAAKS,OAH9B,OAGHR,EAHG,OAIP,EAAKiB,MAAMC,QAAX,eAAuBlB,EAAKmB,OAJrB,gDAMP9B,QAAQC,IAAI,QAAQ,KAAI8B,SANjB,yD,8HAUX,OACI,kBAAC,WAAD,KACI,sCACA,0BAAMC,SAAUC,KAAKP,cACjB,2BAAOF,KAAK,QAAQU,KAAK,QAAQC,SAAUF,KAAKb,eAChD,2BAAOI,KAAK,WAAWU,KAAK,WAAWC,SAAUF,KAAKb,eACtD,2BAAOc,KAAK,SAAST,MAAM,kB,GAtB1BT,aCyCNoB,E,2MAvCXjB,MAAQ,G,EAGRC,aAAe,SAAAC,GAAC,OAAI,EAAKC,SAAL,eAAgBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,S,EAE7DC,a,uCAAe,WAAML,GAAN,eAAAb,EAAA,6DACXa,EAAEM,iBADS,kBAGUrB,EAAQO,MAAM,EAAKM,OAH7B,OAGHR,EAHG,OAIP,EAAKiB,MAAMC,QAAX,eAAuBlB,EAAKmB,OAC5B,EAAKF,MAAMS,eAAe,0BAA0B,GAL7C,gDASPrC,QAAQC,IAAI,aAAa,KAAIqC,SAASR,MAEd,iBAArB,KAAIQ,SAASR,KAGZ,EAAKF,MAAMS,eAAe,gFAAgF,GAC/E,gBAArB,KAAIC,SAASR,MACnB,EAAKF,MAAMS,eAAe,mDAAmD,GAhB1E,yD,8HAqBX,OACI,kBAAC,WAAD,KACI,qCACA,0BAAML,SAAUC,KAAKP,cACjB,2BAAOF,KAAK,QAAQU,KAAK,QAAQC,SAAUF,KAAKb,eAChD,2BAAOI,KAAK,WAAWU,KAAK,WAAWC,SAAUF,KAAKb,eACtD,2BAAOc,KAAK,SAAST,MAAM,iB,GAlC3BT,aCWLuB,EAZC,SAACX,GAIb,OAHIA,EAAMjB,KAAK6B,OACXZ,EAAMa,QAAQC,KAAK,WAGnB,gDAEad,EAAMjB,KAAK6B,MAFxB,SCoDOG,E,2MAhDbxB,MAAQ,G,EAQRU,QAAU,SAAClB,GAAD,OAAU,EAAKW,SAASX,I,EAElCG,O,sBAAS,sBAAAN,EAAA,sEACSF,EAAQQ,SADjB,cAEP,EAAKe,QAAQ,CAACW,MAAM,KAAMI,UAAW,KAAMC,UAAW,KAAMC,IAAK,OAF1D,2C,mNAPUxC,EAAQC,a,OAArBI,E,OACJsB,KAAKX,SAAL,eAAkBX,EAAKmB,OACvB9B,QAAQC,IAAI,Q,qIAUL,IAAD,OAEN,OACA,kBAAC,IAAD,KACGgC,KAAKd,MAAMqB,MACZ,6BACE,kBAAC,IAAD,CAASO,GAAG,KAAZ,UAECd,KAAKd,MAAMqB,MACV,kBAAC,WAAD,KACC,kBAAC,IAAD,CAASQ,QAASf,KAAKnB,OAAQiC,GAAG,KAAlC,aACA,kBAAC,IAAD,CAASA,GAAG,YAAZ,aAGA,kBAAC,WAAD,KACA,kBAAC,IAAD,CAASA,GAAG,YAAZ,aACA,kBAAC,IAAD,CAASA,GAAG,WAAZ,cAKL,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAACvB,GAAD,OAAW,kBAAC,EAASA,MACnD,kBAAC,IAAD,CAAOqB,OAAK,EAACC,KAAK,WAAWC,OAAQ,SAACvB,GAAD,OAAS,kBAAC,EAAD,iBAAYA,EAAZ,CAAmBC,QAAS,EAAKA,cAC/E,kBAAC,IAAD,CAAOoB,OAAK,EAACC,KAAK,UAAUC,OAAQ,SAACvB,GAAD,OAAW,kBAAC,EAAD,iBAAWA,EAAX,CAAkBC,QAAS,EAAKA,cAC/E,kBAAC,IAAD,CAAOoB,OAAK,EAACC,KAAK,WAAWC,OAAQ,SAACvB,GAAD,OAAW,kBAAC,EAAD,iBAAaA,EAAb,CAAoBjB,KAAM,EAAKQ,YAE/E,kBAAC,IAAD,CAAOiC,UAAWnC,U,GA5CRD,aCGEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASP,OAAO,kBAAC,EAAD,MAASQ,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5e296ec8.chunk.js","sourcesContent":["import axios from \"axios\";\r\nlet baseURL;\r\n\r\nconsole.log(\"client \");\r\n\r\nprocess.env.NODE_ENV === \"production\"\r\n  ? //? (baseURL = 'here should be your production endpoint')\r\n    (baseURL = \"https://app-final-glinska.herokuapp.com\")\r\n  : (baseURL = \"http://localhost:5000\");\r\n\r\nconst service = axios.create({ withCredentials: true, baseURL });\r\n\r\nconst actions = {\r\n  isLoggedIn: async () => {\r\n    return await service.get(\"/is-logged-in\");\r\n  },\r\n  signUp: async user => {\r\n    return await service.post(\"/signup\", user);\r\n  },\r\n  logIn: async user => {\r\n    return await service.post(\"/login\", user);\r\n  },\r\n  logOut: async () => {\r\n    return await service.get(\"/logout\");\r\n  }\r\n};\r\n\r\nexport default actions;\r\n","import React, { Component } from 'react';\r\nimport actions from '../../services/index'\r\n\r\n\r\nclass Home extends Component {\r\n  async componentDidMount() {\r\n    //actions.test()\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nfunction NotFound() {\r\n  return (\r\n    <div>\r\n      <h2>Not found</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotFound;\r\n","import React, { Component, Fragment } from 'react';\r\nimport actions from '../../services/index'\r\n\r\nclass SignUp extends Component {\r\n    state = {\r\n\r\n    } \r\n    handleChange = e => this.setState({[e.target.name]: e.target.value})\r\n\r\n    handleSubmit = async e => {\r\n        e.preventDefault()\r\n        try{\r\n            let user = await actions.signUp(this.state);\r\n            this.props.setUser({...user.data})  \r\n        } catch(err){\r\n            console.log('*****',err.message)\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <h2>SignUP</h2>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input name=\"email\" type=\"email\" onChange={this.handleChange} />\r\n                    <input name=\"password\" type=\"password\" onChange={this.handleChange} />\r\n                    <input type=\"submit\" value=\"Sign Up\"/>\r\n                </form>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SignUp;","import React, { Component, Fragment } from 'react';\r\nimport actions from '../../services/index'\r\n\r\nclass LogIn extends Component {\r\n\r\n    state = {\r\n\r\n    } \r\n    handleChange = e => this.setState({[e.target.name]: e.target.value})\r\n\r\n    handleSubmit = async e => {\r\n        e.preventDefault()\r\n        try{\r\n            let user = await actions.logIn(this.state);\r\n            this.props.setUser({...user.data})  \r\n            this.props.doFlashMessage('Logged In Successfully', true)\r\n\r\n\r\n        }catch(err){\r\n            console.log('=-=-=-=-=-',err.response.data)\r\n\r\n            if(err.response.data ===\"Unauthorized\"){\r\n                // this function is fake because we're not actually passing it in\r\n                // look at the full-stack-library-app to see how to pass in this function for flash messages\r\n                this.props.doFlashMessage('Email/Password Combination Incorrect, please check credentials and try again', false)\r\n            } else if(err.response.data ===\"Bad Request\"){\r\n                this.props.doFlashMessage('Please make sure to enter an Email AND Password', false)\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <h2>LogIn</h2>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input name=\"email\" type=\"email\" onChange={this.handleChange} />\r\n                    <input name=\"password\" type=\"password\" onChange={this.handleChange} />\r\n                    <input type=\"submit\" value=\"Log In\"/>\r\n                </form>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LogIn;","import React, { Component } from 'react';\r\n\r\nconst Profile = (props) => {\r\n    if(!props.user.email){ \r\n        props.history.push('/log-in') \r\n    }   \r\n    return (\r\n        <div>\r\n            Profile\r\n            Welcome {props.user.email} !!! \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React, {Component, Fragment} from 'react';\r\nimport { BrowserRouter, Switch, Route, NavLink } from 'react-router-dom';\r\nimport Home from './components/home/Home';\r\nimport NotFound from './components/404/NotFound.js';\r\nimport SignUp from './components/auth/SignUp';\r\nimport LogIn from './components/auth/LogIn';\r\nimport Profile from './components/profile/Profile'\r\nimport actions from './services/index'\r\n\r\nclass App extends Component {\r\n  \r\n  state = { }\r\n  \r\n  async componentDidMount() {\r\n    let user = await actions.isLoggedIn()\r\n    this.setState({...user.data})\r\n    console.log('cool')\r\n  }\r\n\r\n  setUser = (user) => this.setState(user)\r\n  \r\n  logOut = async () => {\r\n    let res = await actions.logOut()\r\n    this.setUser({email:null, createdAt: null, updatedAt: null, _id: null }) //FIX \r\n  }\r\n\r\n  render(){\r\n\r\n    return (\r\n    <BrowserRouter>\r\n      {this.state.email}\r\n      <nav>\r\n        <NavLink to=\"/\">Home |</NavLink>\r\n  \r\n        {this.state.email ? \r\n          <Fragment>\r\n           <NavLink onClick={this.logOut} to='/'>Log Out |</NavLink> \r\n           <NavLink to=\"/profile\">Profile|</NavLink>\r\n           </Fragment>\r\n           :\r\n           <Fragment>\r\n           <NavLink to=\"/sign-up\">Sign Up |</NavLink>\r\n           <NavLink to=\"/log-in\">Log In |</NavLink>\r\n           </Fragment>\r\n          }\r\n        \r\n      </nav>\r\n      <Switch>\r\n        <Route exact path=\"/\" render={(props) => <Home {...props} />} />\r\n        <Route exact path=\"/sign-up\" render={(props)=><SignUp {...props} setUser={this.setUser} />} />\r\n        <Route exact path=\"/log-in\" render={(props) => <LogIn {...props} setUser={this.setUser}/>} />\r\n        <Route exact path=\"/profile\" render={(props) => <Profile {...props} user={this.state}/>} />\r\n\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}